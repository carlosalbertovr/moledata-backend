{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"_36_Enums.UserType": {
				"type": "string",
				"enum": [
					"individual",
					"team"
				]
			},
			"Pick_UserRecord.Exclude_keyofUserRecord.is_deleted__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"user_type": {
						"$ref": "#/components/schemas/_36_Enums.UserType"
					},
					"fullname": {
						"type": "string"
					},
					"country": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"email",
					"user_type",
					"fullname",
					"country"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserRecord.is_deleted_": {
				"$ref": "#/components/schemas/Pick_UserRecord.Exclude_keyofUserRecord.is_deleted__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserOutput": {
				"$ref": "#/components/schemas/Omit_UserRecord.is_deleted_"
			},
			"Pick_UserRecord.email-or-fullname-or-country-or-user_type_": {
				"properties": {
					"email": {
						"type": "string"
					},
					"user_type": {
						"$ref": "#/components/schemas/_36_Enums.UserType"
					},
					"fullname": {
						"type": "string"
					},
					"country": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"user_type",
					"fullname",
					"country"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UserCreateInput": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_UserRecord.email-or-fullname-or-country-or-user_type_"
					},
					{
						"properties": {
							"password": {
								"type": "string"
							}
						},
						"required": [
							"password"
						],
						"type": "object"
					}
				]
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "datamole-backend",
		"version": "1.0.0",
		"description": "Rest API with Nodejs and Prisma",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Carlos Vel√°zquez"
		}
	},
	"paths": {
		"/users/{userId}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "A promise that resolves to the user data if found, or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/UserOutput"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Retrieves a user by their ID.",
				"tags": [
					"User service"
				],
				"security": [],
				"parameters": [
					{
						"description": "- The ID of the user to retrieve.",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users": {
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"200": {
						"description": "A promise that resolves to the created user's output data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserOutput"
								}
							}
						}
					}
				},
				"description": "Creates a new user.",
				"tags": [
					"User service"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- The input data required to create a new user.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCreateInput",
								"description": "- The input data required to create a new user."
							}
						}
					}
				}
			}
		},
		"/users/profile/my-profile": {
			"get": {
				"operationId": "GetCurrentProfile",
				"responses": {
					"200": {
						"description": "A promise that resolves to the user's profile information or null if not found.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/UserOutput"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Retrieves the current user's profile based on the email provided in the request.",
				"tags": [
					"User service"
				],
				"security": [
					{
						"cognito": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}